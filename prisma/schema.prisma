// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tweet {
    id        String   @id @default(uuid())
    userId   String 
    createdAt DateTime @default(now())
    text      String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes         Like[]

    @@index([userId])
    @@unique([createdAt, id])
}

model Like {
    userId   String 
    tweetId   String 
    createdAt DateTime @default(now())
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet         Tweet     @relation(fields: [tweetId], references: [id], onDelete: Cascade)

    @@id([userId, tweetId])
    @@index([userId])
    @@index([tweetId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    emailVerified Boolean? @default(false)
    // auth
    tweets        Tweet[] 
    likes         Like[]
    followers     User[]    @relation("FollowRelation")
    following     User[]    @relation("FollowRelation")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
